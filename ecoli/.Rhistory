start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",z_cost,0.1)
draw_lines <- function(file,color,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$cost)
draw_landscape(z,z_labels)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",z_cost,0.1)
draw_lines("test15.txt", "green",z_cost,0.5)
draw_lines("test15.txt", "green",z_cost,0.5)
landscape<-read.csv("matrix3D.txt", sep="\t")
draw_lines("test15.txt", "green",z_cost,0.5)
peak
draw_lines("test15.txt", "green",z_cost,0.5)
draw_lines("test15.txt", "green",z_cost,0.5)
landscape<-read.csv("matrix3D.txt", sep="\t")
setwd("~/Documents/Github/ai/ecoli")
landscape<-read.csv("matrix3D.txt", sep="\t")
landscape<-landscape %>% distinct(genomeSize, err_rate, .keep_all = TRUE)
View(landscape)
View(landscape)
m_cost<-pivot_wider(landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
m_cost<- m_ctgn[order(m_cost$genomeSize),]
z_cost<-data.matrix(unname(m_cost[,-1]))
m_cost
z_cost
View(m_cost)
View(m_cost)
m_cost<-pivot_wider(landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
m_cost<- m_cost[order(m_cost$genomeSize),]
z_cost<-data.matrix(unname(m_cost[,-1]))
draw_lines("test15.txt", "green",z_cost,0.5)
draw_lines("test25.txt", "darkolivegreen1",z_cost,0.5)
peak
draw_lines("test25.txt", "darkolivegreen1")
draw_lines("test25.txt", "darkolivegreen1",z_QV,0.1)
draw_lines("test15.txt", "green",z_QV,0.1)
draw_lines("test15.txt", "green",z_cost,0.1)
draw_lines("test15.txt", "green",z_QV,0.1)
draw_lines <- function(file,color,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$QV)
draw_landscape(z,z_labels)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test15.txt", "green",z_QV,0.1)
draw_lines("test25.txt", "darkolivegreen1",z_QV,0.1)
peak<-filter(landscape, QV == max(na.omit(z_QV)))
arrow3d(cbind(peak[,1],peak[,2],peak[,3]+0.2),cbind(peak[,1],peak[,2],peak[,3]+0.03), col = "red", size=20)
peak
draw_lines("test15.txt", "green",z_QV,0.1)
arrow3d(cbind(peak[,1],peak[,2],peak[,3]+0.2),cbind(peak[,1],peak[,2],peak[,3]+0.03), col = "red", size=20)
draw_landscape(z_cost,0.1)
draw_landscape(z_cost,0.1)
draw_landscape(z_cost,1)
peak
draw_landscape(z_cost,1)
filter(z_cost, genomeSize > 400000 || genomeSize < 430000)
filter(z_cost, genomeSize > 400000 )
View(landscape)
View(landscape)
filter(landscape, genomeSize > 400000 || genomeSize < 430000)
fil_landscape<-filter(landscape, genomeSize > 400000 || genomeSize < 430000)
m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
m_cost<- m_cost[order(m_cost$genomeSize),]
z_cost<-data.matrix(unname(m_cost[,-1]))
draw_landscape(z_cost,1)
fil_landscape<-filter(landscape, genomeSize > 4000000 || genomeSize < 4300000)
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
draw_landscape(fil_z_cost,1)
fil_landscape
fil_landscape<-filter(landscape, genomeSize > 4000000 || genomeSize < 4300000)
fil_landscape<-filter(landscape, genomeSize > 4000000 && genomeSize < 4300000)
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
draw_landscape(fil_z_cost,1)
fil_landscape
fil_landscape<-filter(landscape, between(x, 4000000, 4300000))
fil_landscape<-filter(landscape, between(genomeSize, 4000000, 4300000))
fil_landscape
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
draw_landscape(fil_z_cost,1)
fil_landscape<-filter(landscape, between(genomeSize, 4000000, 4300000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_landscape(fil_x,fil_y,fil_z_cost,1)
draw_landscape <- function(x,y,z,z_labels) {
par3d(zoom=1.5)
persp3d(x,sort(y),z, col=color[zcol], xlab="",ylab="",zlab="", axes = FALSE, box = TRUE, alpha=0.8)
#title3d('Assembly size and QV by Canu parameters Genome size and Error rate')
axis3d(edge= 'x', at=seq(min(x), max(x),by=200000), labels = round(seq(min(x), max(x),by=200000)/1000000, digits=4))
axis3d(edge= 'y-', at=seq(min(y), max(y),by=0.01))
axis3d(edge= 'z-+', at=seq(min(z), max(z),by=z_labels), labels = round(seq(min(z), max(z),by=z_labels), digits=1))
mtext3d("Canu error rate", edge= 'y-', line = 4, at = NULL, pos = NA)
mtext3d("Canu genome size (Gbp)", edge= 'x', line = 4, at = NULL, pos = NA)
mtext3d("QV", edge= 'z-+', line = 4, at = NULL, pos = NA)
}
draw_landscape(fil_x,fil_y,fil_z_cost,1)
draw_landscape(fil_x,fil_y,fil_z_cost,1)
draw_landscape(fil_x,fil_y,fil_z_cost,1)
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$QV)
draw_landscape(x,y,z,z_labels)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,z_cost,1)
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$cost)
draw_landscape(x,y,z,z_labels)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_lines("test15.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_landscape <- function(x,y,z,z_labels) {
par3d(zoom=1.5)
persp3d(x,sort(y),z, col=color[zcol], xlab="",ylab="",zlab="", axes = FALSE, box = TRUE, alpha=0.8)
#title3d('Assembly size and QV by Canu parameters Genome size and Error rate')
axis3d(edge= 'x', at=seq(min(x), max(x),by=200000), labels = round(seq(min(x), max(x),by=200000)/1000000, digits=4))
axis3d(edge= 'y-', at=seq(min(y), max(y),by=0.01))
axis3d(edge= 'z-+', at=seq(min(z), max(z),by=z_labels), labels = round(seq(min(z), max(z),by=z_labels), digits=1))
mtext3d("Canu error rate", edge= 'y-', line = 4, at = NULL, pos = NA)
mtext3d("Canu genome size (Gbp)", edge= 'x', line = 4, at = NULL, pos = NA)
mtext3d("Cost (dQV,dGenome_size,dContig_N)", edge= 'z-+', line = 4, at = NULL, pos = NA)
}
draw_lines("test15.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_landscape <- function(x,y,z,z_labels) {
par3d(zoom=1.5)
persp3d(x,sort(y),z, col=color[zcol], xlab="",ylab="",zlab="", axes = FALSE, box = TRUE, alpha=0.8)
#title3d('Assembly size and QV by Canu parameters Genome size and Error rate')
axis3d(edge= 'x', at=seq(min(x), max(x),by=200000), labels = round(seq(min(x), max(x),by=200000)/1000000, digits=4))
axis3d(edge= 'y-', at=seq(min(y), max(y),by=0.01))
axis3d(edge= 'z++', at=seq(min(z), max(z),by=z_labels), labels = round(seq(min(z), max(z),by=z_labels), digits=1))
mtext3d("Canu error rate", edge= 'y-', line = 4, at = NULL, pos = NA)
mtext3d("Canu genome size (Gbp)", edge= 'x', line = 4, at = NULL, pos = NA)
mtext3d("Cost (dQV,dGenome_size,dContig_N)", edge= 'z-+', line = 4, at = NULL, pos = NA)
}
draw_lines("test15.txt", "darkolivegreen1",x,y,z_cost,0.5)
fil_landscape<-filter(landscape, between(genomeSize, 3700000, 3850000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_landscape(fil_x,fil_y,fil_z_cost,1)
draw_lines("test15.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test15.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
fil_landscape<-filter(landscape, between(genomeSize, 3700000, 3900000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_landscape(fil_x,fil_y,fil_z_cost,1)
draw_lines("test15.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
fil_landscape<-filter(landscape, between(genomeSize, 3700000, 3900000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_lines("test15.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test15.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test15.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_lines("test15.txt", "green",x,y,z_QV,0.1)
seg_z <- c(path$QV)
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$QV)
draw_landscape(x,y,z,z_labels)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test15.txt", "green",x,y,z_QV,0.1)
draw_lines("test25.txt", "darkolivegreen1",x,y,z_QV,0.1)
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
fil_landscape<-filter(landscape, between(genomeSize, 3700000, 3900000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$cost)
draw_landscape(x,y,z,z_labels)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
fil_landscape<-filter(landscape, between(genomeSize, 3700000, 3900000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$cost)
draw_landscape(x,y,z,z_labels)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
landscape
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
fil_z_cost
fil_landscape<-filter(landscape, between(genomeSize, 4000000, 4200000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
t
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_lines <- function(file,color,x,y,z,z_labels) {
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$QV)
draw_landscape(x,y,z,z_labels)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",x,y,z_QV,0.5)
peak
draw_lines("test25.txt", "darkolivegreen1",x,y,z_QV,0.1)
peak<-filter(landscape, QV == max(na.omit(z_QV)))
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$QV)
draw_landscape(x,y,z,z_labels)
peak<-filter(landscape, QV == max(na.omit(z_QV)))
arrow3d(cbind(peak[,1],peak[,2],peak[,3]+0.2),cbind(peak[,1],peak[,2],peak[,3]+0.03), col = "red", size=20)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",x,y,z_QV,0.5)
fil_landscape<-filter(landscape, between(genomeSize, 4000000, 4200000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$cost)
draw_landscape(x,y,z,z_labels)
peak<-filter(landscape, QV == max(na.omit(z_QV)))
arrow3d(cbind(peak[,1],peak[,2],peak[,3]+0.2),cbind(peak[,1],peak[,2],peak[,3]+0.03), col = "red", size=20)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
fil_landscape<-filter(landscape, between(genomeSize, 4000000, 4100000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
fil_landscape
fil_z_cost
draw_lines <- function(file,color,x,y,z,z_labels) {
path<-read.csv(file, sep="\t")
seg_x <- c(path$x)
seg_y <- c(path$y)
seg_z <- c(path$cost)
draw_landscape(x,y,z,z_labels)
#peak<-filter(landscape, QV == max(na.omit(z_QV)))
#arrow3d(cbind(peak[,1],peak[,2],peak[,3]+0.2),cbind(peak[,1],peak[,2],peak[,3]+0.03), col = "red", size=20)
start_time=0
dur=3
for(i in 1:dim(path)[1])
{
if (i==1) {
points3d(cbind(seg_x[1],seg_y[1],seg_z[1]), col = color, size=6)
movie3d(spin3d(axis = c(0, 0, 1),rpm = 0.5), startTime = start_time, duration = dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
dur=1
} else {
M <- par3d("userMatrix")
points3d(cbind(seg_x[i],seg_y[i],seg_z[i]), col = "black", size=3)
lines3d(cbind(rbind(seg_x[i],seg_x[i-1]),rbind(seg_y[i],seg_y[i-1]),rbind(seg_z[i],seg_z[i-1])), add=TRUE, lwd = 3, col = color)
movie3d( par3dinterp(time = c(start_time,start_time+dur), userMatrix = list(M,rotate3d(M, 0.05, 0, 0, 1) ) ), startTime = start_time, duration = start_time+dur,dir = "figures/", convert = FALSE)
start_time=start_time+dur
}
}
movie3d( par3dinterp(time = c(start_time,dur), userMatrix = list(M,M) ), startTime = start_time, duration = start_time+1,dir = "figures/", convert = FALSE)
}
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
fil_landscape<-filter(landscape, between(genomeSize, 4000000, 4200000))
fil_m_cost<-pivot_wider(fil_landscape, id_cols = genomeSize, names_from = err_rate, values_from = cost)
fil_m_cost<- fil_m_cost[order(fil_m_cost$genomeSize),]
fil_z_cost<-data.matrix(unname(fil_m_cost[,-1]))
fil_y<-na.omit(as.numeric(colnames(fil_m_cost)))
fil_x<-deframe(tibble(fil_m_cost$genomeSize))
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_lines("test25.txt", "darkolivegreen1",x,y,z_cost,0.5)
draw_lines("test25.txt", "darkolivegreen1",fil_x,fil_y,fil_z_cost,1)
